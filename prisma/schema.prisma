generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AUDITOR
  ADMIN
}

model Auth {
  id         String     @id @default(uuid())
  firebaseId String     @unique
  email      String     @unique

  roles      RoleMap[]

  user       User?      @relation("UserAuth")
  auditor    Auditor?   @relation("AuditorAuth")
  admin      Admin?     @relation("AdminAuth")
}

model RoleMap {
  id      Int    @id @default(autoincrement())
  authId  String
  role    Role
  roleId  String

  auth    Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)

  @@unique([authId, role]) // Prevent duplicate role assignments
}

model User {
  id        String   @id @default(uuid())
  authId    String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth      Auth     @relation("UserAuth", fields: [authId], references: [id], onDelete: Cascade)
}

model Auditor {
  id            String   @id @default(uuid())
  authId        String   @unique
  name          String
  firmName      String
  licenseNumber String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  auth          Auth     @relation("AuditorAuth", fields: [authId], references: [id], onDelete: Cascade)
}

model Admin {
  id        String   @id @default(uuid())
  authId    String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth      Auth     @relation("AdminAuth", fields: [authId], references: [id], onDelete: Cascade)
}
